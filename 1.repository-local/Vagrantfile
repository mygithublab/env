# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  #config.vm.box = "hashicorp/precise64"
  # Document reference to https://blog.centos.org/2019/07/updated-centos-vagrant-images-available-v1905-01/
  config.vm.box = "centos/7"

  # please install "vagrant-disksize" by vagrant plugin install vagrant-disksize
  # config.disksize.size = '50GB'

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  config.vm.network :forwarded_port, guest: 80, host:1234


  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"
  # config.vm.network "private_network", ip: "192.168.33.10",
  # virtualbox__intnet: true
  # virtualbox__intnet: "testnetwork"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  # centos share folder setup, install the vagrant-vbguest plugin and add the following line to your Vagrantfile:
  config.vm.synced_folder ".", "/vagrant", type: "virtualbox"
  # map local aliclould repository to /mirror
  config.vm.synced_folder "alicloud-mirror", "/mirror", type: "virtualbox"


  #disable the sync directory by adding the line for centos
  #config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    vb.name = "Linux-Repository"
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
    vb.customize ["modifyvm", :id, "--cpuexecutioncap", "90"]
    vb.memory = "4096"
    vb.cpus = 4
    
  #could not resolve host by adding the following line for centos
  #  vb.customize ["modifyvm", :id, "--natdnshostresolver1", "off"]
  end  
  

  #Verifying the integrity of the images for centos
  #config.vm.provider :virtualbox do |override|
   # override.vm.box_download_checksum_type = "sha256"
   # override.vm.box_download_checksum = "b24c912b136d2aa9b7b94fc2689b2001c8d04280cf25983123e45b6a52693fb3"
   # override.vm.box_url = "https://cloud.centos.org/centos/7/vagrant/x86_64/images/CentOS-7-x86_64-Vagrant-1803_01.VirtualBox.box"
  #end
  

  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  
  # config.vm.provision "file", source: "~/path/to/host/folder", destination: "$HOME/remote/newfolder"

  # config.vm.provision :shell, path: "showdate.sh"
  # config.vm.provision :shell, path: "bootstrap_centos.sh"
  config.vm.provision :shell, path: "setupAliCloudRepo.sh"
  config.vm.provision :shell, path: "crontab_centos_yum_update.sh"
  config.vm.provision :shell, path: "setupJenkinsRepo.sh"
  config.vm.provision :shell, path: "crontab_jenkins_yum_update.sh"
  config.vm.provision :shell, path: "docker_repo/setupDockerRepo.sh"
  config.vm.provision :shell, path: "docker_repo/crontab_docker_yum_update.sh"
  config.vm.provision :shell, path: "nginx_installation.sh"
  config.vm.provision :shell, path: "selinux_disable.sh"
  config.vm.provision :shell, path: "timezone_setup.sh"
end
